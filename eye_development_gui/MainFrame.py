"""Subclass of MainFrameBase, which is generated by wxFormBuilder."""

from epithelium_backend.Epithelium import Epithelium
from epithelium_backend.FurrowEventList import furrow_event_list
from epithelium_backend.FieldType import FieldType
from eye_development_gui.eye_development_gui import MainFrameBase

import wx
import wx.xrc


# Implementing MainFrameBase
class MainFrame(MainFrameBase):
    """Wx frame that contains the entire gui.
     Also acts as both the model and the control for the GUI."""

    def __init__(self, parent):
        """Initializes the GUI and all the data of the model."""
        MainFrameBase.__init__(self, parent)

        MainFrame.add_fields(self.m_scrolledWindow4, furrow_event_list)

        self.__active_epithelium = Epithelium(0)  # type: Epithelium

        #  track all the panels that need to be notified when the
        # active epithelium is changed
        self.epithelium_listeners = [self.m_epithelium_gen_display_panel,
                                     self.m_sim_overview_display_panel,
                                     self.m_simulation_display_panel]  # type: list

        # Timer for updating the epithelium
        self.simulation_timer = wx.Timer(self)
        self.Bind(wx.EVT_TIMER, self.update_epithelium, self.simulation_timer)
        self.simulation_timer.Start(100)

    @staticmethod
    def create_callback(field_type: FieldType, text_control: wx.TextCtrl):
        """
        Create a callback that validates/sets the field type's value
        when the text_control's input changes.
        """
        def callback(event):
            # If valid, sets the value to it and returns True. Otherwise returns False.
            field_type.validate(text_control.GetLineText(0))
            event.Skip()
        return callback

    @staticmethod
    def add_fields(window: wx.Window, events: list):
        """
        Dynamically generate input fields from the furrow events.

        :param window: the wxform window to add the inputs to.
        :param events: a list of furrow events to generate gui inputs from.
        """
        # This was copied from the dynamically generated code that wxFormBuilder spits out.
        # I don't totally understand it.
        g_sizer = wx.GridSizer(0, 2, 0, 0)
        for event in events:
            for param_name, field_type in event.field_types.items():
                # The left hand side -- the label of the input
                static_text = wx.StaticText(window, wx.ID_ANY, param_name, wx.DefaultPosition, wx.DefaultSize, 0)
                static_text.Wrap(-1)
                g_sizer.Add(static_text, 0, wx.ALL, 5)
                # The right hand side -- the input box
                text_control =  wx.TextCtrl(window , wx.ID_ANY, str(field_type.value), wx.DefaultPosition, wx.DefaultSize, 0 )
                # Bind the input box to the field_type value
                text_control.Bind(wx.EVT_TEXT, MainFrame.create_callback(field_type, text_control))
                g_sizer.Add(text_control, 0, wx.ALL, 5)
        window.SetSizer(g_sizer)
        window.Layout()
        g_sizer.Fit(window)

    @ property
    def active_epithelium(self) -> Epithelium:
        """returns the active epithelium"""
        return self.__active_epithelium

    @ active_epithelium.setter
    def active_epithelium(self, value: Epithelium) -> None:
        """
        Sets the active epithelium and sets the epithelium for
        all listeners.
        :param value: The new active epithelium
        :return: None
        """
        self.__active_epithelium = value

        # notify listeners of change
        for listener in self.epithelium_listeners:
            listener.epithelium = self.__active_epithelium

    def ep_gen_input_validation(self):
        """validates all epithelium generation inputs"""
        # TODO: validate each epithelium generation input
        return True

    def ep_gen_create_callback(self, event):
        """
        Callback for ep_gen_create_button. Attempts to create a
        new epithelium from the epithelium generation inputs
        and sets it as the active epithelium. If creation fails the
        user is notified via popup.
        """
        # TODO: (ep_gen_create_callback) Do what the doc string says this will do

        # validate inputs
        if self.ep_gen_input_validation():

            # convert inputs to usable value

            # min cell count
            min_cell_count_str = ''  # type: str
            for i in range(self.min_cell_count_text_ctrl.GetNumberOfLines()):
                min_cell_count_str += self.min_cell_count_text_ctrl.GetLineText(i)
            min_cell_count = int(min_cell_count_str)  # type: int

            # create epithelium from inputs
            self.active_epithelium = Epithelium(min_cell_count)

    def update_epithelium(self, event: wx.EVT_TIMER):
        """Simulates the active epithelium for one tick.
        Draws the updated epithelium."""
        self.active_epithelium.update()
        event.Skip(False)

        for listener in self.epithelium_listeners:
            listener.draw()
